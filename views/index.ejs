<!DOCTYPE html>
<html>

<head>
    <title>Real-Time Prices</title>
    <script src="https://cdn.tailwindcss.com"></script>

    <script>
        let prices = <%- JSON.stringify(prices) %>;
    </script>
</head>

<body class="font-sans m-5">
    <h1 class="text-2xl font-semibold mb-4">Live Prices</h1>

    <div id="price-tables" class="max-w-[500px]"></div>

    <script>
        function formatDate(ts) {
            return new Date(ts).toLocaleString();
        }

        function formatPrice(p) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(parseFloat(p));
        }

        function renderTables() {
            const container = document.getElementById('price-tables');
            container.innerHTML = '';

            let products = prices.products;
            let spot = prices.spot;


            const spotDiv = document.createElement('div');
            spotDiv.className = 'text-lg font-semibold mb-2';
            spotDiv.textContent = 'Spot: ' + formatPrice(prices.spot);
            container.appendChild(spotDiv);

            Object.values(products).forEach(product => {
                const title = document.createElement('h2');
                title.className = 'text-xl font-semibold mb-2';
                title.textContent = product[0].product_name;
                container.appendChild(title);

                const table = document.createElement('table');
                table.className = 'min-w-full bg-white border border-gray-400 rounded shadow overflow-hidden mb-10';

                const thead = document.createElement('thead');
                thead.innerHTML = `
      <tr class="bg-gray-100 text-left text-sm font-medium text-gray-700">
        <th class="px-4 py-2 border-b border-gray-400">&nbsp;</th>
        <th class="px-4 py-2 border-b border-gray-400">Store</th>
        <th class="px-4 py-2 border-b border-gray-400">Price</th>
      </tr>`;
                table.appendChild(thead);

                const tbody = document.createElement('tbody');


                // calculate the prices
                product.forEach(store => {
                    const multiplier = store.price / store.spot_price;
                    let adjusted_price = spot * multiplier;
                    store.adjusted_price = adjusted_price;
                });

                product.sort((a, b) => a.adjusted_price - b.adjusted_price);


                let count = 0;
                product.forEach(store => {
                    count++;

                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';

                    const tdCount = document.createElement('td');
                    tdCount.className = 'px-4 py-2 border-b border-gray-200 m-3';
                    tdCount.innerHTML = `<div class="bg-orange-400 text-white font-medium p-2 text-center">${count}</div>`;

                    const tdStore = document.createElement('td');
                    tdStore.className = 'px-4 py-2 border-b border-gray-200';
                    tdStore.innerHTML = `<a href="${store.product_url}" class="text-blue-600 hover:underline" target="_blank">${store.store_name}</a>`;

                    const tdPrice = document.createElement('td');
                    tdPrice.className = 'px-4 py-2 border-b border-gray-200';
                    tdPrice.innerHTML = `
        <span class="font-medium text-gray-800">${formatPrice(store.adjusted_price)}</span>
        <div class="text-sm text-gray-500">${formatPrice(store.price)}</div>
        <div class="text-sm text-gray-500">${formatDate(store.timestamp)}</div>
      `;

                    row.appendChild(tdCount);
                    row.appendChild(tdStore);
                    row.appendChild(tdPrice);
                    tbody.appendChild(row);
                });

                table.appendChild(tbody);
                container.appendChild(table);
            });
        }


        renderTables();
        
        // get highest timestamp
        const highestTs = Math.max(...Object.values(prices.products).flatMap(product => product.map(store => store.timestamp)));
        const refreshTime = highestTs + 630000;

        setTimeout(() => {
            try {
                console.log('Fetching prices');
                fetch('/prices')
                    .then(response => response.json())
                    .then(data => {
                        prices = data;
                        renderTables();
                    })
                    .catch(error => {
                        console.error('Error fetching prices:', error);
                    });
            } catch (error) {
                console.error('Error fetching prices:', error);
            }
            renderTables();
        }, refreshTime);

        setInterval(async () => {
            try {
                const response = await fetch('/spot');
                const spot = await response.json();
                prices.spot = spot.spot;
                console.log('Spot: ', spot.spot);
                renderTables();
            } catch (error) {
                console.error('Error fetching prices:', error);
            }
        }, 20000);

    </script>

</body>

</html>